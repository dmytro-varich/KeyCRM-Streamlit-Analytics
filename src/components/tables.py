import streamlit as st
import pandas as pd
from typing import Dict, Any, List

def render_manager_tables(manager_dict: Dict[str, Any]) -> None:
    """
    Render manager analytics tables with visual cell merging.
    Table headers and labels are in Ukrainian.
    Args:
        manager_dict (dict): Nested analytics by manager and category.
    """
    default_categories: List[str] = ["–ù–µ –ê–ª–º–∞–∑–∏", "–ê–ª–º–∞–∑–∏", "–î—ñ–∞–º–∞–Ω—Ç–∏"]
    custom_keys: List[str] = ["–ó–∞–∫—Ä. –ó—É—Å—Ç—Ä—ñ—á –ö–ò–á–í", "–ó–∞–∫—Ä. –ù–∞–≤—á–∞–Ω–Ω—è –í –ó–ê–ü–ò–°–Ü", "–ó–∞–∫—Ä. –ó—É—Å—Ç—Ä—ñ—á ONLINE"]
    for manager, categories in manager_dict.items():
        st.markdown(f"### üë§ {manager}")
        html = "<table border='1' style='border-collapse:collapse;width:100%;'>"
        html += (
            "<tr>"
            "<th rowspan='2'>–ö–∞—Ç–µ–≥–æ—Ä—ñ—è</th>"
            "<th colspan='2'>–ù–æ–≤—ñ</th>"
            "<th colspan='2'>–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ</th>"
            "<th rowspan='2'>–ù–µ –∫–≤–∞–ª—ñ—Ñ—ñ–∫–æ–≤–∞–Ω—ñ</th>"
            f"<th rowspan='2'>{custom_keys[0]}</th>"
            f"<th rowspan='2'>{custom_keys[1]}</th>"
            f"<th rowspan='2'>{custom_keys[2]}</th>"
            "</tr>"
            "<tr>"
            "<th>–ü—Ä–æ–≥—Ä—ñ—Ç—ñ</th><th>–ù–µ –ø—Ä–æ–≥—Ä—ñ—Ç—ñ</th>"
            "<th>–ü—Ä–æ–≥—Ä—ñ—Ç—ñ</th><th>–ù–µ –ø—Ä–æ–≥—Ä—ñ—Ç—ñ</th>"
            "</tr>"
        )
        # Calculate totals for '–í—Å—å–æ–≥–æ' category
        total_stats = {
            "–ù–æ–≤—ñ": {"–ü—Ä–æ–≥—Ä—ñ—Ç—ñ": 0, "–ù–µ –ø—Ä–æ–≥—Ä—ñ—Ç—ñ": 0},
            "–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ": {"–ü—Ä–æ–≥—Ä—ñ—Ç—ñ": 0, "–ù–µ –ø—Ä–æ–≥—Ä—ñ—Ç—ñ": 0},
            "–ù–µ –∫–≤–∞–ª—ñ—Ñ—ñ–∫–æ–≤–∞–Ω—ñ": 0,
            custom_keys[0]: 0,
            custom_keys[1]: 0,
            custom_keys[2]: 0
        }
        for category in default_categories:
            stats = categories.get(category, None)
            if stats is None:
                stats = {
                    "–ù–æ–≤—ñ": {"–ü—Ä–æ–≥—Ä—ñ—Ç—ñ": 0, "–ù–µ –ø—Ä–æ–≥—Ä—ñ—Ç—ñ": 0},
                    "–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ": {"–ü—Ä–æ–≥—Ä—ñ—Ç—ñ": 0, "–ù–µ –ø—Ä–æ–≥—Ä—ñ—Ç—ñ": 0},
                    "–ù–µ –∫–≤–∞–ª—ñ—Ñ—ñ–∫–æ–≤–∞–Ω—ñ": 0,
                    custom_keys[0]: 0,
                    custom_keys[1]: 0,
                    custom_keys[2]: 0
                }
            # Sum each column for totals
            total_stats["–ù–æ–≤—ñ"]["–ü—Ä–æ–≥—Ä—ñ—Ç—ñ"] += stats["–ù–æ–≤—ñ"]["–ü—Ä–æ–≥—Ä—ñ—Ç—ñ"]
            total_stats["–ù–æ–≤—ñ"]["–ù–µ –ø—Ä–æ–≥—Ä—ñ—Ç—ñ"] += stats["–ù–æ–≤—ñ"]["–ù–µ –ø—Ä–æ–≥—Ä—ñ—Ç—ñ"]
            total_stats["–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ"]["–ü—Ä–æ–≥—Ä—ñ—Ç—ñ"] += stats["–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ"]["–ü—Ä–æ–≥—Ä—ñ—Ç—ñ"]
            total_stats["–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ"]["–ù–µ –ø—Ä–æ–≥—Ä—ñ—Ç—ñ"] += stats["–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ"]["–ù–µ –ø—Ä–æ–≥—Ä—ñ—Ç—ñ"]
            total_stats["–ù–µ –∫–≤–∞–ª—ñ—Ñ—ñ–∫–æ–≤–∞–Ω—ñ"] += stats.get("–ù–µ –∫–≤–∞–ª—ñ—Ñ—ñ–∫–æ–≤–∞–Ω—ñ", 0)
            total_stats[custom_keys[0]] += stats.get(custom_keys[0], 0)
            total_stats[custom_keys[1]] += stats.get(custom_keys[1], 0)
            total_stats[custom_keys[2]] += stats.get(custom_keys[2], 0)
        for category in default_categories:
            stats = categories.get(category, None)
            if stats is None:
                stats = {
                    "–ù–æ–≤—ñ": {"–ü—Ä–æ–≥—Ä—ñ—Ç—ñ": 0, "–ù–µ –ø—Ä–æ–≥—Ä—ñ—Ç—ñ": 0},
                    "–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ": {"–ü—Ä–æ–≥—Ä—ñ—Ç—ñ": 0, "–ù–µ –ø—Ä–æ–≥—Ä—ñ—Ç—ñ": 0},
                    "–ù–µ –∫–≤–∞–ª—ñ—Ñ—ñ–∫–æ–≤–∞–Ω—ñ": 0,
                    custom_keys[0]: 0,
                    custom_keys[1]: 0,
                    custom_keys[2]: 0
                }
            html += "<tr>"
            html += f"<td>{category}</td>"
            html += f"<td>{stats['–ù–æ–≤—ñ']['–ü—Ä–æ–≥—Ä—ñ—Ç—ñ']}</td>"
            html += f"<td>{stats['–ù–æ–≤—ñ']['–ù–µ –ø—Ä–æ–≥—Ä—ñ—Ç—ñ']}</td>"
            html += f"<td>{stats['–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ']['–ü—Ä–æ–≥—Ä—ñ—Ç—ñ']}</td>"
            html += f"<td>{stats['–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ']['–ù–µ –ø—Ä–æ–≥—Ä—ñ—Ç—ñ']}</td>"
            html += f"<td>{stats.get('–ù–µ –∫–≤–∞–ª—ñ—Ñ—ñ–∫–æ–≤–∞–Ω—ñ', 0)}</td>"
            html += f"<td>{stats.get(custom_keys[0], 0)}</td>"
            html += f"<td>{stats.get(custom_keys[1], 0)}</td>"
            html += f"<td>{stats.get(custom_keys[2], 0)}</td>"
            html += "</tr>"
        # Add totals row for '–í—Å—å–æ–≥–æ'
        html += "<tr style='font-weight:bold;'>"
        html += f"<td>–í—Å—å–æ–≥–æ</td>"
        html += f"<td>{total_stats['–ù–æ–≤—ñ']['–ü—Ä–æ–≥—Ä—ñ—Ç—ñ']}</td>"
        html += f"<td>{total_stats['–ù–æ–≤—ñ']['–ù–µ –ø—Ä–æ–≥—Ä—ñ—Ç—ñ']}</td>"
        html += f"<td>{total_stats['–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ']['–ü—Ä–æ–≥—Ä—ñ—Ç—ñ']}</td>"
        html += f"<td>{total_stats['–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ']['–ù–µ –ø—Ä–æ–≥—Ä—ñ—Ç—ñ']}</td>"
        html += f"<td>{total_stats['–ù–µ –∫–≤–∞–ª—ñ—Ñ—ñ–∫–æ–≤–∞–Ω—ñ']}</td>"
        html += f"<td>{total_stats[custom_keys[0]]}</td>"
        html += f"<td>{total_stats[custom_keys[1]]}</td>"
        html += f"<td>{total_stats[custom_keys[2]]}</td>"
        html += "</tr>"
        html += "</table>"
        st.markdown(html, unsafe_allow_html=True)

def convert_manager_dict_to_df(manager_dict: Dict[str, Any]) -> pd.DataFrame:
    """
    Convert manager analytics dict to DataFrame.
    Args:
        manager_dict (dict): Nested analytics by manager and category.
    Returns:
        pd.DataFrame: Analytics table.
    """
    rows: List[Dict[str, Any]] = []
    for manager, categories in manager_dict.items():
        for category, states in categories.items():
            for state, programs in states.items():
                for program, count in programs.items():
                    rows.append({
                        '–ú–µ–Ω–µ–¥–∂–µ—Ä': manager,
                        '–ö–∞—Ç–µ–≥–æ—Ä—ñ—è': category,
                        '–°—Ç–∞—Ç—É—Å': state,
                        '–ü–∞—Ä–∞–º–µ—Ç—Ä': program,
                        '–ö—ñ–ª—å–∫—ñ—Å—Ç—å': count
                    })
    return pd.DataFrame(rows) if rows else pd.DataFrame()

def create_simple_dataframe(cards: List[Dict[str, Any]]) -> pd.DataFrame:
    """
    Create a simple DataFrame for cards.
    Args:
        cards (list): List of card dicts.
    Returns:
        pd.DataFrame: Table of cards.
    """
    if not cards:
        return pd.DataFrame()
    rows: List[Dict[str, Any]] = []
    for card in cards:
        row = {
            'ID': card.get('id'),
            '–ù–∞–∑–≤–∞': card.get('title'),
            '–ö–æ–Ω—Ç–∞–∫—Ç': card.get('contact', {}).get('full_name', 'N/A') if card.get('contact') else 'N/A',
            '–¢–µ–ª–µ—Ñ–æ–Ω': card.get('contact', {}).get('phone', 'N/A') if card.get('contact') else 'N/A',
            '–°—Ç–∞—Ç—É—Å': card.get('status', {}).get('name', 'N/A') if card.get('status') else 'N/A',
            '–ú–µ–Ω–µ–¥–∂–µ—Ä': card.get('manager', {}).get('full_name', 'N/A') if card.get('manager') else 'N/A',
            '–°—Ç–≤–æ—Ä–µ–Ω–æ': card.get('created_at'),
        }
        rows.append(row)
    return pd.DataFrame(rows)

